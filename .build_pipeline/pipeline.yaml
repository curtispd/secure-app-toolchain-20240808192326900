---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: secure-app-pipeline
spec:
  params:
    - name: repository
      description: the git repo containing source code. If empty, the repository url will be found from toolchain
      default: ""
    - name: branch
      description: the branch for the git repo
      default: "master"
    - name: revision
      description: the git revision/commit for the git repo
      default: ""
    - name: git-token
      description: access token for the git repo
    - name: fail-on-lint-errors
      description: force failure of task when docker lint errors are found
      default: "true"
    - name: fail-on-scanned-issues
      description: force failure of task when vulnerability advisor scan issues are found
      default: "true"
    - name: build-script
      description: The command(s) to run the build in run-build step. It will override the default commands
      default: ""
    - name: path-to-context
      default: "."
    - name: path-to-dockerfile
      default: "."
    - name: dockerfile
      default: "Dockerfile"
    - name: registry-region
      description: The IBM Cloud region for image registry
    - name: registry-namespace
      description: container registry namespace
    - name: app-name
      description: application name
    - name: image-name
      description: image name
    - name: pipeline-debug
      default: "0"
    - name: registry-create-namespace
      description: create container registry namespace if it doesn't already exists
      default: "true"
    - name: inventoryRepo
      description: The variable storing git integration for the repository storing build inventory with the toolchain
    - name: insights
      description: The variable storing DevOps Insight integration with the toolchain
    - name: toolchain-build-image
      description: Image to use for `build` task
      default: "icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.46"
    - name: tester-tests-image
      description: Image to use for `unit-test` task
      default: "icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.46"
  workspaces:
    - name: pipeline-ws
  tasks:
    - name: git-clone
      taskRef:
        name: git-clone-repo
      params:
        - name: continuous-delivery-context-secret
          value: "secure-properties"
        - name: ibmcloud-apikey-secret-key
          value: "toolchain-apikey"
        - name: git-access-token
          value: $(params.git-token)
        - name: repository
          value: $(params.repository)
        - name: branch
          value: $(params.branch)
        - name: revision
          value: $(params.revision)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: output
          workspace: pipeline-ws
    - name: code-risk-analyzer
      runAfter:
        - git-clone
      taskRef:
        name: cra-v2-cra
      params:
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: docker-lint
      runAfter: [git-clone]
      taskRef:
        name: linter-docker-lint
      params:
        - name: path-to-dockerfile
          value: $(params.path-to-dockerfile)
        - name: dockerfile
          value: $(params.dockerfile)
        - name: fail-on-lint-errors
          value: $(params.fail-on-lint-errors)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: workspace
          workspace: pipeline-ws
    - name: build
      runAfter: [git-clone]
      taskRef:
        name: toolchain-build
      params:
        - name: run-build-image
          value: $(params.toolchain-build-image)
        - name: custom-script
          value: $(params.build-script)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: output
          workspace: pipeline-ws
    - name: unit-tests
      runAfter: [docker-lint,build]
      taskRef:
        name: tester-run-tests
      params:
        - name: tests-image
          value: $(params.tester-tests-image)
        - name: tests-script
          value: |
            if [ -f ./test/run-tests.sh ]; then
              source ./test/run-tests.sh
              echo -n $FILE_LOCATIONS > $(results.test-result-file-paths.path)
              echo -n $TEST_TYPES > $(results.test-types.path)
            else
              echo "Test runner script not found: ./test/run-tests.sh"
            fi
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: containerize
      runAfter: [build]
      taskRef:
        name: icr-execute-in-dind
      params:
        - name: continuous-delivery-context-secret
          value: "secure-properties"
        - name: container-registry-apikey-secret-key
          value: "apikey"
        - name: registry-region
          value: $(params.registry-region)
        - name: registry-namespace
          value: $(params.registry-namespace)
        - name: image-name
          value: $(params.image-name)
        - name: path-to-context
          value: $(params.path-to-context)
        - name: registry-create-namespace
          value: $(params.registry-create-namespace)
        - name: path-to-dockerfile
          value: $(params.path-to-dockerfile)
        - name: dockerfile
          value: $(params.dockerfile)
        - name: docker-commands
          value: |
            # Minting image tag using format: BUILD_NUMBER-BRANCH-COMMIT_ID-TIMESTAMP
            # e.g. 3-master-50da6912-20181123114435
            # (use build number as first segment to allow image tag as a patch release name according to semantic versioning)
            GIT_BRANCH="$(tasks.git-clone.results.git-branch)"
            GIT_COMMIT="$(tasks.git-clone.results.git-commit)"
            TIMESTAMP=$( date -u "+%Y%m%d%H%M%S")
            IMAGE_TAG=${TIMESTAMP}
            if [ ! -z "${GIT_COMMIT}" ]; then
              GIT_COMMIT_SHORT=$( echo ${GIT_COMMIT} | head -c 8 )
              IMAGE_TAG=${GIT_COMMIT_SHORT}-${IMAGE_TAG}
            fi
            if [ ! -z "${GIT_BRANCH}" ]; then IMAGE_TAG=${GIT_BRANCH}-${IMAGE_TAG} ; fi
            IMAGE_TAG=${BUILD_NUMBER}-${IMAGE_TAG}
            echo "$IMAGE_TAG"
            # Default docker build / inspect / push command
            docker build --tag "$IMAGE_URL:$IMAGE_TAG" --file $PATH_TO_DOCKERFILE/$DOCKERFILE $PATH_TO_CONTEXT
            docker inspect ${IMAGE_URL}:${IMAGE_TAG}
            docker push ${IMAGE_URL}:${IMAGE_TAG}
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: source
          workspace: pipeline-ws
    - name: vulnerability-advisor
      taskRef:
        name: icr-check-va-scan
      params:
        - name: continuous-delivery-context-secret
          value: "secure-properties"
        - name: container-registry-apikey-secret-key
          value: "apikey"
        - name: scan-report-file
          value: 'app-image-va-report.json'
        - name: fail-on-scanned-issues
          value: $(params.fail-on-scanned-issues)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: image-url
          value: $(tasks.containerize.results.image-repository)
        - name: image-digest
          value: $(tasks.containerize.results.image-digest)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: git-clone-inventory-repo
      runAfter: 
        - vulnerability-advisor
      taskRef:
        name: git-clone-repo
      params:
        - name: continuous-delivery-context-secret
          value: "secure-properties"
        - name: ibmcloud-apikey-secret-key
          value: "toolchain-apikey"
        - name: repository
          value: $(params.inventoryRepo)
        - name: branch
          value: "master"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: git-credentials-json-file
          value: credentials.json
      workspaces:
        - name: output
          workspace: pipeline-ws
          subpath: inventory-repo
    - name: git-commit-inventory-repo
      runAfter: 
        - git-clone-inventory-repo
      taskRef:
        name: git-commit-inventory-repo-task
      params:
        - name: repository
          value: $(tasks.git-clone.results.git-repository)
        - name: appname
          value: $(params.app-name)       
        - name: commitid
          value: $(tasks.git-clone-inventory-repo.results.git-commit)
        - name: image-url
          value: $(tasks.containerize.results.image-repository)
        - name: image-digest
          value: $(tasks.containerize.results.image-digest)
        - name: shuttle-properties-file
          value: "build.properties"
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
        - name: output
          workspace: pipeline-ws
          subpath: inventory-repo
    - name: publish-doi-buildrecord
      runAfter: [git-commit-inventory-repo]
      when:
        - input: $(params.insights)
          operator: in
          values: ["draservicebroker"]
      taskRef:
        name: doi-publish-buildrecord
      params:
        - name: toolchain-apikey-secret-key
          value: "toolchain-apikey"
        - name: app-name
          value: $(params.app-name)
        - name: git-repository
          value: $(tasks.git-clone.results.git-repository)
        - name: git-branch
          value: $(tasks.git-clone.results.git-branch)
        - name: git-commit
          value: $(tasks.git-clone.results.git-commit)
    - name: publish-doi-va-scan-record
      runAfter: [publish-doi-buildrecord]
      when:
        - input: $(params.insights)
          operator: in
          values: ["draservicebroker"]
      taskRef:
        name: doi-publish-testrecord
      params:
        - name: toolchain-apikey-secret-key
          value: "toolchain-apikey"
        - name: build-number
          value: "$(tasks.publish-doi-buildrecord.results.build-number)"
        - name: app-name
          value: $(params.app-name)
        - name: file-locations
          value: $(tasks.vulnerability-advisor.results.scan-report-file)
        - name: test-types
          value: vulnerabilityadvisor
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: publish-doi-code-tests
      runAfter: [publish-doi-buildrecord]
      when:
        - input: $(params.insights)
          operator: in
          values: ["draservicebroker"]
      taskRef:
        name: doi-publish-testrecord
      params:
        - name: toolchain-apikey-secret-key
          value: "toolchain-apikey"
        - name: build-number
          value: "$(tasks.publish-doi-buildrecord.results.build-number)"
        - name: app-name
          value: $(params.app-name)
        - name: file-locations
          value: "$(tasks.unit-tests.results.test-result-file-paths)"
        - name: test-types
          value: "$(tasks.unit-tests.results.test-types)"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws