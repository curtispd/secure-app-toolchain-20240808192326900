apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: download-artifacts
spec:
  params:
    - name: api
      description: the IBM Cloud api endpoint
      default: "https://cloud.ibm.com"
    - name: apikey
      description: The IBM Cloud API Key
    - name: shuttle-properties-file
      description: The name of the build artifact as retrieved from the build metadata
  workspaces:
    - name: output
      description: A workspace
      mountPath: /output
  results:
    - name: artifacts-downloaded
      description: The variable indicating whether artifact is downloaded or not
    - name: build_number
      description: The variable storing build number as retrieved from the build metadata
    - name: objectname
      description: The name of the build artifact as retrieved from the build metadata
  steps:
    - name: download-artifacts
      image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.11
      workingDir: /output
      env:
        - name: API
          value: $(params.api)
        - name: APIKEY
          value: $(params.apikey)
        - name: FILE
          value: inventory.json
        - name: ENV_FILE
          value: $(params.shuttle-properties-file) 
      script: |
          #!/bin/bash

          # Code here fetches the artifact metadata as present in the inventory.json.
          # The task assumes the file /output/inventory-repo/inventory.json is already present as a result of the cloning of the 
          # by the upstream git-clone-inventory-repo task. The JSON file contains the metadata like the name of the name of the artifact (artifact)
          # the build number (build_number) among other details. 
          ls -laht /output/
          cd /output/inventory-repo;          
          if [[ -f "$FILE" ]]; then
            OBJECTNAME=$(cat $FILE |jq -r '.artifact')
            BUILD=$(cat $FILE |jq -r '.build_number')
            echo -n "${BUILD}" > $(results.build_number.path)
            echo -n "${OBJECTNAME}" > $(results.objectname.path)
            echo -n "yes" > $(results.objectname.path)
            jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' "$FILE" > "$ENV_FILE"
            mv "$ENV_FILE" ../
          fi


          # Code here downloads the artifact after processing the information present in the inventory.json.
          # The downloaded artifacts will be stored in /output directory which can then be utilized by downstream
          # task to carry out deployment steps on the target Virtual Server instance.
          cd /output           
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: publish-doi-deployrecord
spec:
  params:
    - name: inventoryrepo
      description: The variable storing git integration for the repository storing build inventory with the toolchain
    - name: api
      description: The IBM Cloud API Endpoint
    - name: apikey
      description: The IBM Cloud API Key
    - name: appname
      description: The name of the application passed as environment variable
    - name: target
      description: The name of the environment where deployment needs to be performed
    - name: build_number
      description: The build number of the build as retreived from the build metadata
  workspaces:
    - name: output
      description: A workspace to store the output of intermittent steps
      mountPath: /output
  volumes:
    - name: cd-config
      configMap:
        name: toolchain
  steps:
    - name: publish-doi-deployrecord
      image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.11
      volumeMounts:
        - name: cd-config
          mountPath: /cd-config
      workingDir: /artifacts
      env:
        - name: API
          value: $(params.api)
        - name: APIKEY
          value: $(params.apikey)
        - name: APP_NAME
          value: $(params.appname)
        - name: TOOLCHAIN_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/toolchain-id']
        - name: DEPLOY_STATUS
          value: "pass"
        - name: TARGET
          value: $(params.target)
        - name: INVENTORY_REPO
          value: $(params.inventoryrepo)
        - name: JOB_URL
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/pipeline-run-url']
        - name: BUILD_NUMBER
          value: $(params.build_number)
      script: |
        #!/bin/bash
        set -e -o pipefail
        export HOME="/root"
        TOOLCHAIN_ID=$(jq -r '.toolchain_guid' /cd-config/toolchain.json)
        export TOOLCHAIN_ID=${TOOLCHAIN_ID} # for doi plugin
        ibmcloud login -a $API --apikey $APIKEY --no-region
        ibmcloud doi publishdeployrecord --env "${TARGET}" --status=${DEPLOY_STATUS} --joburl="${JOB_URL}" \
          --buildnumber="${BUILD_NUMBER}" --logicalappname="${APP_NAME}" ${INVENTORY_REPO}
